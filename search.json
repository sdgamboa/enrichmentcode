[{"path":"https://sdgamboa.github.io/enrichmentcode/articles/ora.html","id":"create-example-data","dir":"Articles","previous_headings":"","what":"Create example data","title":"ORA with EnrichmentBrowser, phyper, and fisher.test","text":"Create example data using functions EnrichmentBrowser package: SummarizedExperiment (SE) contains 100 unique genes total: 91 unique genes across signatures. Individual lengths signatures: Define significant genes (adjusted pvalue < 0.1): Two signatures (gs1 gs2) composed significantly DA genes entirely:","code":"seed <- 123 sig_gen_fdr <- 0.1 #FDR threshold for significant genes in the DA  ## Create SummarizedExperiment set.seed(seed) se <- makeExampleData(what=\"SE\")  ## Run Differential abundance set.seed(seed) se <- deAna(se)  # Create a list of ten signatures set.seed(seed) gs <- makeExampleData(what=\"gs\", gnames=names(se))  n_unique_g <- length(unique(unlist(gs, use.names = FALSE))) se #> class: SummarizedExperiment  #> dim: 100 12  #> metadata(0): #> assays(1): exprs #> rownames(100): g1 g2 ... g99 g100 #> rowData names(4): FC limma.STAT PVAL ADJ.PVAL #> colnames(12): s1 s2 ... s11 s12 #> colData names(2): GROUP BLOCK n_unique_g #> [1] 91 map_int(gs, length) #>  gs1  gs2  gs3  gs4  gs5  gs6  gs7  gs8  gs9 gs10  #>   17   17   25   18   17   17   19   18   19   21 sig.genes <- names(se)[rowData(se)$ADJ.PVAL < sig_gen_fdr] length(sig.genes) #> [1] 72 gs[[1]] <- sample(sig.genes, length(gs[[1]]))  gs[[2]] <- sample(sig.genes, length(gs[[2]]))     map_dbl(gs, ~ round(mean(.x %in% sig.genes), 2)) #>  gs1  gs2  gs3  gs4  gs5  gs6  gs7  gs8  gs9 gs10  #> 1.00 1.00 0.76 0.44 0.65 0.94 0.68 0.72 0.74 0.57"},{"path":"https://sdgamboa.github.io/enrichmentcode/articles/ora.html","id":"run-ora","dir":"Articles","previous_headings":"","what":"Run ORA","title":"ORA with EnrichmentBrowser, phyper, and fisher.test","text":"analysis, using original 10 signatures:","code":"ea.res <- sbea(     method = \"ora\", se = se, gs = gs, perm = 0,     alpha = sig_gen_fdr, # FDR threshold for significant genes in the DA     padj.method = \"fdr\" ) res <- ea.res$res.tbl |>      as.data.frame() |>      arrange(PVAL) res |>      knitr::kable()"},{"path":"https://sdgamboa.github.io/enrichmentcode/articles/ora.html","id":"reproduce-manually-what-sbea-does","dir":"Articles","previous_headings":"","what":"Reproduce “manually” what sbea does","title":"ORA with EnrichmentBrowser, phyper, and fisher.test","text":"inspect results detail, let’s reproduce code implemented EnrichmentBrowser, adding information number genes background well. EnrichmentBrowser uses phyper function ORA. following snippets code taken EnrichmentBrowser package (Bioconductor): Note analysis, total number genes SE reduced. reduction depends intersection total unique genes across whole list/collection/database signatures genes present SE. Updated number genes (reduced): Updated number significant genes (reduced):","code":"myORA <- function(se, gs, sig.genes) {     ## Get a subset of signatures and genes in the SE for further analysis     GS.MIN.SIZE <- 5     GS.MAX.SIZE <- 500      ## Subset of the original SE.     ## This depends on the genes available in the signatures database      igenes <- intersect(rownames(se), unique(unlist(gs)))     newSE <- se[igenes,]      ## Subset of the genes in the signatures     newGS <- lapply(gs, function(s) s[s %in% igenes])     lens <- lengths(newGS)     newGS <- newGS[lens >= GS.MIN.SIZE & lens <= GS.MAX.SIZE]     f <- file()     sink(file = f)     cmat <- safe::getCmatrix(newGS, as.matrix = TRUE)     sink()     close(f)     newSE <- newSE[rownames(cmat),]       ## Subset of the original number of significant genes     isig <- rownames(newSE) %in% sig.genes     nr.sigs <- sum(isig)      ## Run ORA with phyper     sig.cmat <- cmat & isig     ovlp.sizes <- colSums(sig.cmat)     gs.sizes <- colSums(cmat)      uni.sizes <- nrow(newSE) - gs.sizes      gs.ps <- phyper(         q = ovlp.sizes - 1, # number of significant genes in the signature (minus 1)         m = gs.sizes, # number of genes in the signature (significant or not)         n = uni.sizes, # number of genes not in the signature (significant or not)         k = nr.sigs, # total number of significant genes (in the signature or not)         lower.tail = FALSE     )           res_tbl <- tibble(         gene_set_name = colnames(cmat),         genes_in_set = gs.sizes,         sig_genes_in_set = ovlp.sizes,         p_value = gs.ps,         genes_not_in_set = uni.sizes,         total_sig_genes = nr.sigs     ) |>          arrange(p_value)          list(         rest_tbl = res_tbl,         newSE = newSE,         newGS = newGS,         nr.sigs = nr.sigs     ) } my_ora <- myORA(se, gs, sig.genes) my_ora$rest_tbl |>      knitr::kable() my_ora$newSE #> class: SummarizedExperiment  #> dim: 93 12  #> metadata(0): #> assays(1): exprs #> rownames(93): g1 g10 ... g98 g99 #> rowData names(4): FC limma.STAT PVAL ADJ.PVAL #> colnames(12): s1 s2 ... s11 s12 #> colData names(2): GROUP BLOCK my_ora$nr.sigs #> [1] 67"},{"path":"https://sdgamboa.github.io/enrichmentcode/articles/ora.html","id":"check-one-signature-with-different-accompanying-sets-of-signatures","dir":"Articles","previous_headings":"","what":"Check one signature with different accompanying sets of signatures","title":"ORA with EnrichmentBrowser, phyper, and fisher.test","text":", number unique genes collection/database signatures changes, background change well even SE target signature : example , input SE signature interest (gs1) , p-value changed depending number unique genes present across signatures. Total number genes left SE: Let’s use custom function created reproduce results using EnrichemntBrowser functions, now adding number genes background: Let’s add signature background: Running ORA: , pvalue cases. FDR still vary depending number values p-values adjusted.","code":"output <- vector(\"list\", length(gs)) for (i in seq_along(output)) {     ora <- sbea(         method=\"ora\", se=se, gs=gs[1:i], perm=0, alpha = 0.1, padj.method = \"fdr\"     )     output[[i]] <- as.data.frame(ora$res.tbl)     names(output) <- paste0(\"nsigs_\", length(1:i)) } output <- bind_rows(output, .id = \"n_gs\") output |>      filter(GENE.SET == \"gs1\") |>      knitr::kable() output2 <- vector(\"list\", length(gs)) for (i in seq_along(output2)) {     output2[[i]] <- myORA(se, gs[1:i], sig.genes)     names(output2)[i] <- paste0(\"nsigs_\", length(1:i)) } map_int(output2, ~ nrow(.x$newSE)) #>  nsigs_1  nsigs_2  nsigs_3  nsigs_4  nsigs_5  nsigs_6  nsigs_7  nsigs_8  #>       17       28       48       58       69       72       79       83  #>  nsigs_9 nsigs_10  #>       86       93 res_tbl2 <- output2 |>      map(~ return(.x[[\"rest_tbl\"]])) |>      bind_rows(.id = \"n_gs\") res_tbl2 |>     filter(gene_set_name == \"gs1\") |>     knitr::kable() background_sig <- list(bk = unique(unlist(gs))) length(background_sig[[1]]) #> [1] 93 output3 <- vector(\"list\", length(gs)) for (i in seq_along(output3)) {     input_gs <- c(gs[1:i], background_sig)     ora_3 <- sbea(         method = \"ora\", se = se, gs = input_gs, perm = 0, alpha = 0.1,         padj.method = \"fdr\"     )     output3[[i]] <- as.data.frame(ora_3$res.tbl)     names(output3) <- paste0(\"nsigs_\", length(1:i)) } output3 <- bind_rows(output3, .id = \"n_gs\") output3 |>      filter(GENE.SET == \"gs1\") |>      knitr::kable()"},{"path":"https://sdgamboa.github.io/enrichmentcode/articles/ora.html","id":"reproduce-with-fisher-exact-test","dir":"Articles","previous_headings":"","what":"Reproduce with Fisher exact test","title":"ORA with EnrichmentBrowser, phyper, and fisher.test","text":"Now, let’s just create custom function achieve results, using fisher.test function instead phyper function: Reproducing first analysis: Reproducing analysis different number signatures:","code":"myFisher <- function(x) {     mySE <- x$newSE     mySigs <- x$newGS     all_genes <- rownames(mySE)     results <- vector(\"list\", length(mySigs))      for (i in seq_along(results)) {         a <- sum(mySigs[[i]] %in% sig.genes)         b <- sum(!mySigs[[i]] %in% sig.genes)         c <- sum((all_genes %in% sig.genes) & (!all_genes %in% mySigs[[i]]))         d <- sum((!all_genes %in% sig.genes) & (!all_genes %in% mySigs[[i]]))         ct <- matrix(c(a, b, c, d), nrow = 2, byrow = TRUE)         pval <- fisher.test(ct, alternative = \"g\")$p.value         sig_name <- names(mySigs)[i]                  dat <- as.data.frame(matrix(c(sig_name,pval, a, b, c, d), nrow = 1))         colnames(dat) <- c(             \"sig_name\", \"p_value\",             \"significat_inSignature\", \"notSignificant_inSignature\",              \"significant_inBackground\", \"notSignificant_inBackground\"         )         results[[i]] <- dat     }     results |>          bind_rows() |>          arrange(p_value) } myFisher(output2[[10]]) |>      knitr::kable() output2 |>      map(myFisher) |>      bind_rows(.id = \"n_sigs\") |>      filter(sig_name == \"gs1\") |>      knitr::kable()"},{"path":"https://sdgamboa.github.io/enrichmentcode/articles/ora.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"ORA with EnrichmentBrowser, phyper, and fisher.test","text":"","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.3.2 (2023-10-31) #>  os       Ubuntu 22.04.3 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2024-02-09 #>  pandoc   2.19.2 @ /usr/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package              * version     date (UTC) lib source #>  abind                  1.4-5       2016-07-21 [1] RSPM #>  annotate               1.80.0      2023-10-24 [1] Bioconductor #>  AnnotationDbi          1.64.1      2023-11-03 [1] Bioconductor #>  Biobase              * 2.62.0      2023-10-24 [1] Bioconductor #>  BiocGenerics         * 0.48.1      2023-11-01 [1] Bioconductor #>  Biostrings             2.70.2      2024-01-28 [1] Bioconduc~ #>  bit                    4.0.5       2022-11-15 [1] RSPM #>  bit64                  4.0.5       2020-08-30 [1] RSPM #>  bitops                 1.0-7       2021-04-24 [1] RSPM #>  blob                   1.2.4       2023-03-17 [1] RSPM #>  bslib                  0.6.1       2023-11-28 [1] RSPM #>  cachem                 1.0.8       2023-05-01 [1] RSPM #>  cli                    3.6.2       2023-12-11 [1] RSPM #>  crayon                 1.5.2       2022-09-29 [1] RSPM #>  DBI                    1.2.1       2024-01-12 [1] RSPM #>  DelayedArray           0.28.0      2023-10-24 [1] Bioconductor #>  desc                   1.4.3       2023-12-10 [1] RSPM #>  digest                 0.6.34      2024-01-11 [1] RSPM #>  dplyr                * 1.1.4       2023-11-17 [1] RSPM #>  EnrichmentBrowser    * 2.32.0      2023-10-24 [1] Bioconductor #>  evaluate               0.23        2023-11-01 [1] RSPM #>  fansi                  1.0.6       2023-12-08 [1] RSPM #>  fastmap                1.1.1       2023-02-24 [1] RSPM #>  fs                     1.6.3       2023-07-20 [1] RSPM #>  generics               0.1.3       2022-07-05 [1] RSPM #>  GenomeInfoDb         * 1.38.5      2023-12-28 [1] Bioconduc~ #>  GenomeInfoDbData       1.2.11      2024-02-09 [1] Bioconductor #>  GenomicRanges        * 1.54.1      2023-10-29 [1] Bioconductor #>  glue                   1.7.0       2024-01-09 [1] RSPM #>  graph                * 1.80.0      2023-10-24 [1] Bioconductor #>  GSEABase               1.64.0      2023-10-24 [1] Bioconductor #>  htmltools              0.5.7       2023-11-03 [1] RSPM #>  httr                   1.4.7       2023-08-15 [1] RSPM #>  IRanges              * 2.36.0      2023-10-24 [1] Bioconductor #>  jquerylib              0.1.4       2021-04-26 [1] RSPM #>  jsonlite               1.8.8       2023-12-04 [1] RSPM #>  KEGGgraph              1.62.0      2023-10-24 [1] Bioconductor #>  KEGGREST               1.42.0      2023-10-24 [1] Bioconductor #>  knitr                  1.45        2023-10-30 [1] RSPM #>  lattice                0.21-9      2023-10-01 [3] CRAN (R 4.3.2) #>  lifecycle              1.0.4       2023-11-07 [1] RSPM #>  limma                  3.58.1      2023-10-31 [1] Bioconductor #>  magrittr               2.0.3       2022-03-30 [1] RSPM #>  Matrix                 1.6-1.1     2023-09-18 [3] CRAN (R 4.3.2) #>  MatrixGenerics       * 1.14.0      2023-10-24 [1] Bioconductor #>  matrixStats          * 1.2.0       2023-12-11 [1] RSPM #>  memoise                2.0.1       2021-11-26 [1] RSPM #>  pillar                 1.9.0       2023-03-22 [1] RSPM #>  pkgconfig              2.0.3       2019-09-22 [1] RSPM #>  pkgdown                2.0.7       2022-12-14 [1] any (@2.0.7) #>  png                    0.1-8       2022-11-29 [1] RSPM #>  purrr                * 1.0.2       2023-08-10 [1] RSPM #>  R6                     2.5.1       2021-08-19 [1] RSPM #>  ragg                   1.2.7       2023-12-11 [1] RSPM #>  RCurl                  1.98-1.14   2024-01-09 [1] RSPM #>  Rgraphviz              2.46.0      2023-10-24 [1] Bioconductor #>  rlang                  1.1.3       2024-01-10 [1] RSPM #>  rmarkdown              2.25        2023-09-18 [1] RSPM #>  RSQLite                2.3.5       2024-01-21 [1] RSPM #>  S4Arrays               1.2.0       2023-10-24 [1] Bioconductor #>  S4Vectors            * 0.40.2      2023-11-23 [1] Bioconduc~ #>  safe                   3.42.0      2023-10-24 [1] Bioconductor #>  sass                   0.4.8       2023-12-06 [1] RSPM #>  sessioninfo            1.2.2       2021-12-06 [1] any (@1.2.2) #>  SparseArray            1.2.3       2023-12-25 [1] Bioconduc~ #>  SparseM                1.81        2021-02-18 [1] RSPM #>  statmod                1.5.0       2023-01-06 [1] RSPM #>  stringi                1.8.3       2023-12-11 [1] RSPM #>  stringr                1.5.1       2023-11-14 [1] RSPM #>  SummarizedExperiment * 1.32.0      2023-10-24 [1] Bioconductor #>  systemfonts            1.0.5       2023-10-09 [1] RSPM #>  textshaping            0.3.7       2023-10-09 [1] RSPM #>  tibble                 3.2.1       2023-03-20 [1] RSPM #>  tidyselect             1.2.0       2022-10-10 [1] RSPM #>  utf8                   1.2.4       2023-10-22 [1] RSPM #>  vctrs                  0.6.5       2023-12-01 [1] RSPM #>  xfun                   0.41        2023-11-01 [1] RSPM #>  XML                    3.99-0.16.1 2024-01-22 [1] RSPM #>  xtable                 1.8-4       2019-04-21 [1] RSPM #>  XVector                0.42.0      2023-10-24 [1] Bioconductor #>  yaml                   2.3.8       2023-12-11 [1] RSPM #>  zlibbioc               1.48.0      2023-10-24 [1] Bioconductor #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.3.2/lib/R/site-library #>  [3] /opt/R/4.3.2/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://sdgamboa.github.io/enrichmentcode/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package maintainer. Maintainer.","code":""},{"path":"https://sdgamboa.github.io/enrichmentcode/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ww (2024). enrichmentcode: Package (Title Case). R package version 0.1.0, https://sdgamboa.github.io/enrichmentcode/.","code":"@Manual{,   title = {enrichmentcode: What the Package Does (Title Case)},   author = {Who wrote it},   year = {2024},   note = {R package version 0.1.0},   url = {https://sdgamboa.github.io/enrichmentcode/}, }"},{"path":"https://sdgamboa.github.io/enrichmentcode/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"https://sdgamboa.github.io/enrichmentcode/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"https://sdgamboa.github.io/enrichmentcode/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""}]
